{
  "uid" : "c5ada4d8a95076d9",
  "name" : "TestGoogleSearch.test_search",
  "title" : "Test search",
  "time" : {
    "start" : 1476351415618,
    "stop" : 1476351465909,
    "duration" : 50291
  },
  "summary" : {
    "attachments" : 0,
    "steps" : 0
  },
  "failure" : {
    "message" : "WebDriverException: Message: A new session could not be created. Details: Problem getting session data for driver type IosDriver; does it implement 'get driverData'?\n",
    "stackTrace" : "request = <SubRequest 'setup_and_close_safari_on_ios' for <Function 'test_search'>>\n\n    @pytest.fixture(scope='class')\n    def setup_and_close_safari_on_ios(request):\n>       Browser.open_safari_on_ios()\n\ngoogle_test/mobile_test/conftest.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nframework/driver_manager.py:32: in open_safari_on_ios\n    cls.driver = AWD.Remote('http://localhost:4723/wd/hub', cap)\nvenv/lib/python2.7/site-packages/appium/webdriver/webdriver.py:36: in __init__\n    super(WebDriver, self).__init__(command_executor, desired_capabilities, browser_profile, proxy, keep_alive)\nvenv/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:90: in __init__\n    self.start_session(desired_capabilities, browser_profile)\nvenv/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:177: in start_session\n    response = self.execute(Command.NEW_SESSION, capabilities)\nvenv/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10edf1110>\nresponse = {'status': 500, 'value': '{\"status\":33,\"value\":{\"message\":\"A new session could not be created. Details: Problem getting session data for driver type IosDriver; does it implement \\'get driverData\\'?\"},\"sessionId\":null}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       WebDriverException: Message: A new session could not be created. Details: Problem getting session data for driver type IosDriver; does it implement 'get driverData'?\n\nvenv/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:192: WebDriverException"
  },
  "description" : null,
  "severity" : "NORMAL",
  "status" : "BROKEN",
  "testId" : null,
  "suite" : {
    "uid" : "af81ed30782994dd",
    "name" : "google_test.mobile_test.test_ios_google",
    "title" : "Test ios google"
  },
  "steps" : [ ],
  "attachments" : [ ],
  "issues" : [ ],
  "labels" : [ {
    "name" : "host",
    "value" : "miniMonster.local"
  }, {
    "name" : "thread",
    "value" : "52525-MainThread"
  }, {
    "name" : "suite-name",
    "value" : "google_test.mobile_test.test_ios_google"
  }, {
    "name" : "suite-title",
    "value" : null
  }, {
    "name" : "severity",
    "value" : "normal"
  } ],
  "parameters" : [ ]
}