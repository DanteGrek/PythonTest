<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1476369682803" stop="1476369764584">
  <name>google_test.mobile_test.test_ios_google</name>
  <test-cases>
    <test-case start="1476369682803" status="broken" stop="1476369735093">
      <name>TestGoogleSearch.test_search2</name>
      <failure>
        <message>WebDriverException: Message: A new session could not be created. Details: Problem getting session data for driver type IosDriver; does it implement 'get driverData'?
</message>
        <stack-trace>request = &lt;SubRequest 'setup_and_close_safari_on_ios' for &lt;Function 'test_search2'&gt;&gt;

    @pytest.fixture(scope='class')
    def setup_and_close_safari_on_ios(request):
&gt;       Browser.open_safari_on_ios()

google_test/mobile_test/conftest.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
framework/driver_manager.py:32: in open_safari_on_ios
    cls.driver = AWD.Remote('http://localhost:4723/wd/hub', cap)
venv/lib/python2.7/site-packages/appium/webdriver/webdriver.py:36: in __init__
    super(WebDriver, self).__init__(command_executor, desired_capabilities, browser_profile, proxy, keep_alive)
venv/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:90: in __init__
    self.start_session(desired_capabilities, browser_profile)
venv/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:177: in start_session
    response = self.execute(Command.NEW_SESSION, capabilities)
venv/lib/python2.7/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1028e4790&gt;
response = {'status': 500, 'value': '{"status":33,"value":{"message":"A new session could not be created. Details: Problem getting session data for driver type IosDriver; does it implement \'get driverData\'?"},"sessionId":null}'}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       WebDriverException: Message: A new session could not be created. Details: Problem getting session data for driver type IosDriver; does it implement 'get driverData'?

venv/lib/python2.7/site-packages/selenium/webdriver/remote/errorhandler.py:192: WebDriverException</stack-trace>
      </failure>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="54637-MainThread"/>
        <label name="host" value="miniMonster.local"/>
      </labels>
      <attachments/>
      <steps/>
    </test-case>
    <test-case start="1476369682803" status="passed" stop="1476369764584">
      <name>TestGoogleSearch.test_search</name>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="54639-MainThread"/>
        <label name="host" value="miniMonster.local"/>
      </labels>
      <attachments>
        <attachment source="dd613c27-fdd1-453f-a4b8-7c857770ce9d-attachment.png" title="screenshot" type="image/png"/>
      </attachments>
      <steps>
        <step start="1476369735811" status="passed" stop="1476369738888">
          <title>Input text: 'Python guide' into Input field</title>
          <name>Input text: 'Python guide' into Input field</name>
          <attachments/>
          <steps/>
        </step>
        <step start="1476369738888" status="passed" stop="1476369740933">
          <title>Click on Submit button</title>
          <name>Click on Submit button</name>
          <attachments/>
          <steps/>
        </step>
        <step start="1476369743187" status="passed" stop="1476369745099">
          <title>Close alert</title>
          <name>Close alert</name>
          <attachments/>
          <steps/>
        </step>
        <step start="1476369746634" status="passed" stop="1476369748685">
          <title>Click on Change to English</title>
          <name>Click on Change to English</name>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
  </test-cases>
  <labels/>
</ns0:test-suite>
